{"version":3,"sources":["components/Jumbotron.js","components/SearchForm.js","components/Gif.js","components/StatusBar.js","components/GameContainer.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","SearchForm","props","components_Jumbotron","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","Gif","allGifs","gifs","map","e","i","key","src","images","fixed_height","url","alt","check","StatusBar","status","_this","win","score","this","Component","GameContainer","state","clicked","reset","setState","scores","selected","shuffle","push","event","target","includes","alert","components_StatusBar","handlePageChanger","components_Gif","API","query","axios","get","App","currentPage","length","j","Math","floor","random","_ref","handlePageChange","page","_event$target","Object","defineProperty","preventDefault","then","results","data","catch","err","console","log","renderPage","components_SearchForm","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7dc20e0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className='jumbotron'>\r\n            <h1>Gif Memory Game</h1>\r\n            <p>\r\n                Search for your favorite gifs and play a game!\r\n            </p>\r\n            <p>\r\n                If you click on a gif more than once, you lose!\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport Jumbotron from './Jumbotron';\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <div className='container'>\r\n        <Jumbotron />\r\n            <div className='form-group'>\r\n            <label htmlFor='search'>Search</label>\r\n            <input \r\n                onChange={props.handleInputChange}\r\n                value={props.search}\r\n                name='search'\r\n                type='text'\r\n                className='form-control rounded-pill'\r\n                placeholder='Search for gifs...'\r\n                id='search'\r\n            />\r\n            <button \r\n            onClick={props.handleFormSubmit}\r\n            className='btn btn-dark rounded-pill mt-3'\r\n            >\r\n                Search\r\n            </button>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\n\r\nfunction Gif(props) {\r\n    const gifs = props.gifs;\r\n    const allGifs = gifs.map((e, i) => {\r\n        return <div className='col-sm-3 pic-box mb-3' key={i}>\r\n        <img \r\n        src={e.images.fixed_height.url} \r\n        alt={e.url}\r\n        id={e.id}\r\n        onClick={props.check}\r\n        className='w-100 click-img'\r\n        />\r\n        </div>\r\n        \r\n    })\r\n    return (\r\n        <div className='row'>\r\n            {allGifs}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gif;","import React, { Component } from 'react';\r\n\r\nclass StatusBar extends Component {\r\n    status = () => {\r\n        if (this.props.win) {\r\n            return <h1>You win! :)</h1>\r\n        } else if (this.props.win === false) {\r\n            return <h3 className='text-light'>Score: {this.props.score} | 12</h3>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='d-flex justify-content-between'>\r\n                {this.status()}\r\n                <button\r\n                    className='btn btn-transparent text-light'\r\n                    // onClick={this.props.handlePageChange('Search')}\r\n                >\r\n                    Home\r\n                    </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React, { Component } from 'react';\r\nimport Gif from './Gif';\r\nimport StatusBar from './StatusBar';\r\n\r\nclass GameContainer extends Component {\r\n    state = {\r\n        win: false,\r\n        score: 0,\r\n        gifs: this.props.gifs,\r\n        clicked: ['nothing'],\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            score: 0,\r\n            clicked: ['nothing']\r\n        })\r\n    }\r\n\r\n    scores = (selected, clicked) => {\r\n        if (clicked) {\r\n            this.reset();\r\n            this.setState(this.props.shuffle(this.state.gifs))\r\n        } else {\r\n            this.state.clicked.push(selected)\r\n            this.setState(this.props.shuffle(this.state.gifs))\r\n            this.setState({ score: this.state.score + 1 })\r\n        }\r\n    }\r\n\r\n    check = event => {\r\n        const selected = event.target.id;\r\n        const clicked = this.state.clicked.includes(selected);\r\n        this.scores(selected, clicked)\r\n        if (this.state.win) {\r\n            alert('You are winner')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <StatusBar\r\n                    win={this.state.win}\r\n                    score={this.state.score}\r\n                    handlePageChanger={this.props.handlePageChanger}\r\n                />\r\n                <Gif\r\n                    check={this.check}\r\n                    gifs={this.state.gifs}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import axios from \"axios\";\r\n\r\nconst url = \"https://api.giphy.com/v1/gifs/search?q=\";\r\nconst apikey = \"&api_key=dc6zaTOxFJmzC&limit=12\";\r\n\r\nexport default {\r\n  search: query => axios.get(url + query + apikey)\r\n};","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport SearchForm from './components/SearchForm';\nimport GameContainer from './components/GameContainer';\nimport API from './utils/API';\n\nclass App extends Component {\n\n  state = {\n    gifs: [],\n    currentPage: 'Search',\n    search: ''\n  };\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return { gifs: a };\n  }\n\n  handlePageChange = page => {\n    this.setState({ currentPage: page });\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    API.search(this.state.search)\n    .then(results => {\n      if (results.data.data.length < 12) {\n        alert('Not enough gifs');\n      } else {\n        this.setState({ gifs: results.data.data })\n        this.handlePageChange('Game')\n      }\n    })\n    .catch(err => console.log(err));\n  }\n\n  // Conditional rendering determines which page to load based on currentPage\n  renderPage = () => {\n    if (this.state.currentPage === 'Search') {\n      return <SearchForm \n      search={this.state.search}\n      handlePageChange={this.handlePageChange}\n      handleInputChange={this.handleInputChange}\n      handleFormSubmit={this.handleFormSubmit}\n      />\n    } else if (this.state.currentPage === 'Game') {\n      return <GameContainer \n      handlePageChange={this.handlePageChange}\n      gifs={this.state.gifs}\n      shuffle={this.shuffle}\n      />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderPage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}