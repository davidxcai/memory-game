{"version":3,"sources":["components/Jumbotron.js","components/SearchForm.js","components/Gif.js","components/StatusBar.js","components/GameContainer.js","utils/API.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","SearchForm","components_Jumbotron","Gif","allGifs","gifs","map","e","i","key","src","images","fixed_height","url","alt","check","StatusBar","status","_this","score","console","log","changePage","handlePageChange","this","Component","GameContainer","state","clicked","reset","setState","scores","selected","shuffle","push","event","target","includes","components_StatusBar","components_Gif","API","query","axios","get","Footer","href","React","App","currentPage","length","j","Math","floor","random","_ref","page","_event$target","Object","defineProperty","preventDefault","then","results","data","alert","catch","err","renderPage","components_SearchForm","components_GameContainer","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b39a617d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className='jumbotron rounded-0 text-light'>\r\n            <h1>Gif Memory Game</h1>\r\n            <p>\r\n                Rules: Don't click on a gif more than once!\r\n            </p>\r\n            <hr />\r\n            <div className='form-group mt-4 mb-0'>\r\n                <input\r\n                    onChange={props.handleInputChange}\r\n                    value={props.search}\r\n                    name='search'\r\n                    type='text'\r\n                    className='form-control border-top-0 border-left-0 border-right-0 rounded-0 border-secondary text-center text-light'\r\n                    placeholder='Search for gifs...'\r\n                    id='search'\r\n                />\r\n                <button\r\n                    onClick={props.handleFormSubmit}\r\n                    className='btn btn-transparent text-light rounded-0 mt-3 mb-0'\r\n                >\r\n                    Search\r\n            </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport Jumbotron from './Jumbotron';\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <div className='container'>\r\n        <Jumbotron \r\n        handleInputChange={props.handleInputChange}\r\n        search={props.search}\r\n        handleFormSubmit={props.handleFormSubmit}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\n\r\nfunction Gif(props) {\r\n    const gifs = props.gifs;\r\n    const allGifs = gifs.map((e, i) => {\r\n        return <div className='col-sm-3 pic-box mb-3' key={i}>\r\n        <img \r\n        src={e.images.fixed_height.url} \r\n        alt={e.url}\r\n        id={e.id}\r\n        onClick={props.check}\r\n        className='w-100 click-img'\r\n        />\r\n        </div>\r\n        \r\n    })\r\n    return (\r\n        <div className='row'>\r\n            {allGifs}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gif;","import React, { Component } from 'react';\r\n\r\nclass StatusBar extends Component {\r\n    status = () => {\r\n        if (this.props.score === 12) {\r\n            return <h5 className='text-light monster-font'>You win! :)</h5>\r\n        } else if (this.props.score < 12) {\r\n            console.log('status score: ' + this.props.score)\r\n            return <h5 className='text-light monster-font'>Score: {this.props.score} | 12</h5>\r\n        }\r\n    }\r\n\r\n    changePage = () => {\r\n        this.props.handlePageChange('Search');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='d-flex justify-content-between align-items-center'>\r\n                {this.status()}\r\n                <button\r\n                    className='btn btn-transparent text-light monster-font'\r\n                    onClick={this.changePage}\r\n                >\r\n                    Search\r\n                    </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StatusBar;","import React, { Component } from 'react';\r\nimport Gif from './Gif';\r\nimport StatusBar from './StatusBar';\r\n\r\nclass GameContainer extends Component {\r\n    state = {\r\n        score: 0,\r\n        gifs: this.props.gifs,\r\n        clicked: ['nothing']\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            score: 0,\r\n            clicked: ['nothing']\r\n        })\r\n    }\r\n\r\n    scores = (selected, clicked) => {\r\n        if (clicked) {\r\n            this.reset();\r\n            this.setState(this.props.shuffle(this.state.gifs))\r\n        } else {\r\n            this.state.clicked.push(selected)\r\n            this.setState({ score: this.state.score + 1})\r\n            this.setState(this.props.shuffle(this.state.gifs))\r\n        }\r\n    }\r\n\r\n    check = event => {\r\n        const selected = event.target.id;\r\n        const clicked = this.state.clicked.includes(selected);\r\n        this.scores(selected, clicked)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <StatusBar\r\n                    score={this.state.score}\r\n                    handlePageChange={this.props.handlePageChange}\r\n                />\r\n                <Gif\r\n                    check={this.check}\r\n                    gifs={this.state.gifs}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import axios from \"axios\";\r\n\r\nconst url = \"https://api.giphy.com/v1/gifs/search?q=\";\r\nconst apikey = \"&api_key=dc6zaTOxFJmzC&limit=12\";\r\n\r\nexport default {\r\n  search: query => axios.get(url + query + apikey)\r\n};","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='footer'>\r\n                <div className='container d-flex justify-content-around text-light'>\r\n                <p>Â© Dafydd Zephyr 2019</p>\r\n                <a href='https://github.com/helloimdavidhaha' target='_blank' className='text-light'>Github</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport SearchForm from './components/SearchForm';\nimport GameContainer from './components/GameContainer';\nimport API from './utils/API';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\n  state = {\n    gifs: [],\n    currentPage: 'Search',\n    search: ''\n  };\n\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return { gifs: a };\n  }\n\n  handlePageChange = page => {\n    this.setState({ currentPage: page });\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    API.search(this.state.search)\n    .then(results => {\n      if (results.data.data.length < 12) {\n        alert('Not enough gifs');\n      } else {\n        this.setState({ gifs: results.data.data })\n        this.handlePageChange('Game')\n      }\n    })\n    .catch(err => console.log(err));\n  }\n\n  // Conditional rendering determines which page to load based on currentPage\n  renderPage = () => {\n    if (this.state.currentPage === 'Search') {\n      return <SearchForm \n      search={this.state.search}\n      handlePageChange={this.handlePageChange}\n      handleInputChange={this.handleInputChange}\n      handleFormSubmit={this.handleFormSubmit}\n      />\n    } else if (this.state.currentPage === 'Game') {\n      return <GameContainer \n      handlePageChange={this.handlePageChange}\n      gifs={this.state.gifs}\n      shuffle={this.shuffle}\n      />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderPage()}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}